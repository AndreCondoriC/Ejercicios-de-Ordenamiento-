#include <iostream>
#include <vector>

void selectionSort(std::vector<int>& arr) {
    int n = arr.size();
    
    for (int i = 0; i < n - 1; i++) {
        
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;  
            }
        }
        
        std::swap(arr[i], arr[minIndex]);
    }
}

int main() {
    std::vector<int> usuarios = {580, 320, 760, 435, 520};
    
    selectionSort(usuarios);

    std::cout << "Ordenado: ";
    for (int num : usuarios) {
        std::cout << num << " ";
    }
    return 0;
}

#include <iostream>
#include <vector>

void bubbleSort(std::vector<int>& arr) {
    int n = arr.size();
    
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            
            if (arr[j] > arr[j + 1]) {
                std::swap(arr[j], arr[j + 1]);
            }
        }
    }
}

int main() {
    std::vector<int> tiemposRespuesta = {125, 90, 150, 180, 65};
    
    bubbleSort(tiemposRespuesta);

    std::cout << "Ordenado: ";
    for (int num : tiemposRespuesta) {
        std::cout << num << " ";
    }
    return 0;
}

#include <iostream>
#include <vector>

void insertionSort(std::vector<int>& arr) {
    int n = arr.size();
    
    for (int i = 1; i < n; i++) {
        int key = arr[i]; 
        int j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        
        arr[j + 1] = key;
    }
}

int main() {
    
    std::vector<int> clicks = {520, 130, 900, 750, 200};
    
    insertionSort(clicks);

    std::cout << "Lista ordenada con InserciÃ³n Directa: ";
    for (int num : clicks) {
        std::cout << num << " ";
    }
    return 0;
}

#include <iostream>
#include <vector>

int partition(std::vector<int>& arr, int low, int high) {
    int pivot = arr[high]; 
    int i = low - 1; 

    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            std::swap(arr[i], arr[j]);
        }
    }
    
    std::swap(arr[i + 1], arr[high]);
    return i + 1; 
}

void quickSort(std::vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high); 
    
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    
    std::vector<int> tamanosArchivos = {850, 230, 590, 540, 310};
    
    quickSort(tamanosArchivos, 0, tamanosArchivos.size() - 1);

    std::cout << "Lista ordenada con Quicksort: ";
    for (int num : tamanosArchivos) {
        std::cout << num << " ";
    }
    return 0;
}

#include <iostream>
#include <vector>

void merge(std::vector<double>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1; 
    int n2 = right - mid;    
    
    std::vector<double> L(n1), R(n2);
    
    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int i = 0; i < n2; i++) R[i] = arr[mid + 1 + i];
    
    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(std::vector<double>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2; 
        
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        
        merge(arr, left, mid, right);
    }
}

int main() {
    
    std::vector<double> tiemposEjecucion = {3.05, 2.23, 4.65, 1.82, 2.4};
    
    mergeSort(tiemposEjecucion, 0, tiemposEjecucion.size() - 1);

    std::cout << "Lista ordenada con Mergesort: ";
    for (double num : tiemposEjecucion) {
        std::cout << num << " ";
    }
    return 0;
}
